import os

def compile(source, dest_dir):
    filename = os.path.basename(source).split(".")[0]
    dest_path = os.path.join(dest_dir, filename + ".ts") 

    source_text = ""
    with open(source) as sourceFile:
        source_text = sourceFile.read()

    with open(dest_path, "w+") as destFile:
        lines = source_text.split("\n")

        uniforms = []
        attributes = []
        varyings = []

        for line in lines:
            split_line = line.split(";")[0].split(" ")
            if (split_line[0] == "in"):
                attributes.append(split_line[-1])
            elif (split_line[0] == "uniform"):
                uniforms.append(split_line[-1])
            elif (split_line[0] == "out"):
                varyings.append(split_line[-1])

        formattedText = "\\n".join(lines)
        destFile.write("// Auto-generated by gltots.py\n")
        


        attributestype = " | ".join([f"\"{term}\"" for term in attributes])
        varyingstype = " | ".join([f"\"{term}\"" for term in varyings])
        uniformstype = " | ".join([f"\"{term}\"" for term in uniforms])
    
        # Make in/out/unifrom types
        destFile.write(f"export type {filename}Attributes = {attributestype}\n" if len(attributestype) > 0 else "")
        destFile.write(f"export type {filename}Varyings = {varyingstype}\n" if len(varyings) > 0 else "")
        destFile.write(f"export type {filename}Uniforms = {uniformstype}\n" if len(uniforms) > 0 else "")

        attributeslocationfunction = f"static getAttributeLocation(gl: WebGL2RenderingContext, program: WebGLProgram, item: {filename}Attributes): number {{ return gl.getAttribLocation(program, item) }}\n"
        uniformlocationfunction = f"static getUniformLocation(gl: WebGL2RenderingContext, program: WebGLProgram, item: {filename}Uniforms): WebGLUniformLocation {{ return gl.getUniformLocation(program, item) }}\n"
            
        destFile.write(f"export default class {filename} {{\n")
        destFile.write(attributeslocationfunction if len(attributes) > 0 else "")
        destFile.write(uniformlocationfunction if len(uniforms) > 0 else "")
        destFile.write(f"static src = \"{formattedText}\"\n")
        destFile.write("}\n")
GLSL_PATH = os.path.join(os.path.dirname(__file__), "../src/components/renderer/3D/shaders/glsl")
TS_OUTPUT_PATH = os.path.join(os.path.dirname(__file__), "../src/components/renderer/3D/shaders/ts")

for glsl in os.listdir(GLSL_PATH):
    if (glsl.endswith(".glsl")):
        compile(os.path.join(GLSL_PATH, glsl), TS_OUTPUT_PATH)

